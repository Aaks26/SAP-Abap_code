*&---------------------------------------------------------------------*
*& Report ZRFI_BCM_PAYMENT_CHECKLIST
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZRFI_BCM_PAYMENT_CHECKLIST_CP.

TABLES :bnk_batch_item,bnk_batch_header.
include Zbcm_checklist_top.

**************** INPUT SCREEN ******************************************
SELECT-OPTIONS : s_ZBUKR FOR bnk_batch_header-zbukr NO INTERVALS NO-EXTENSION OBLIGATORY ,
                 s_LAUO FOR bnk_batch_item-laufi_o,
                 s_batch  FOR bnk_batch_header-Batch_no ,
                 s_LAUF FOR bnk_batch_header-laufd OBLIGATORY.

START-OF-SELECTION.

  SELECT guid zbukr batch_no laufd batch_sum rule_id item_cnt hbkid
    INTO TABLE it_bnkh
    FROM bnk_batch_header
    WHERE zbukr IN s_zbukr
    AND batch_no IN s_batch
    AND laufd IN s_LAUF.

  IF it_bnkh IS NOT INITIAL.
    SELECT zbukr batch_no laufd laufi_o item_no lifnr vblnr amt_rulecu item_no
    INTO TABLE it_bnkI
    FROM bnk_batch_item
    FOR ALL ENTRIES IN it_bnkh
    WHERE batch_no = it_bnkh-batch_no
     AND laufi_o IN s_LAUO.
  ENDIF.

  SELECT bukrs butxt  adrnr
    INTO TABLE it_t001
    FROM t001
    FOR ALL ENTRIES IN it_bnkh
    WHERE bukrs = it_bnkh-zbukr.

  IF it_t001 IS NOT INITIAL.
    SELECT addrnumber name1 name2
      INTO TABLE it_adrc
      FROM adrc
      FOR ALL ENTRIES IN it_t001
      WHERE addrnumber = it_t001-adrnr.
  ENDIF.

  IF it_bnkh IS NOT INITIAL.
    SELECT rule_id text
      INTO TABLE it_tt
      FROM tbnk_rule_t
      FOR ALL ENTRIES IN it_bnkh
      WHERE rule_id = it_bnkh-rule_id.
  ENDIF.

  IF it_bnki IS NOT INITIAL. "laufd laufi hbkid zbukr ubnky ubknt  vblnr lifnr name1 kunnr xvorl zswif zbnkn zbnkn_long  bkref
    SELECT laufd laufi hbkid zbukr ubnky ubknt  vblnr lifnr name1 kunnr xvorl zswif zbnkn zbnkn_long  bkref
      INTO TABLE it_reguh
      FROM reguh
      FOR ALL ENTRIES IN it_bnki
      WHERE laufd = it_bnki-laufd
      AND laufi = it_bnki-laufi_o  "or laufi in s_LAUO
      AND zbukr = it_bnki-zbukr
      AND lifnr = it_bnki-lifnr
      AND xvorl <> 'X' . " or xvorl = 'X'.
  ENDIF.

  IF  it_reguh IS NOT INITIAL.
    SELECT  rbukrs belnr prctr blart netdt awref hsl lifnr kunnr gjahr augdt augbl bldat
      FROM Acdoca
      INTO TABLE it_ACDOCA
      FOR ALL ENTRIES IN it_reguh
      WHERE rbukrs = it_reguh-zbukr
       AND lifnr = it_reguh-lifnr
      AND augdt = it_reguh-laufd .
  ENDIF.

  IF it_reguh IS NOT INITIAL .
    SELECT  banka bankl bnklz swift
        INTO TABLE it_bnka
        FROM bnka
        FOR ALL ENTRIES IN it_reguh
        WHERE swift = it_reguh-zswif . " and bankl = it_reguh-ubnky. "and BANKS = 'IN'.
  ENDIF.

***********************************header internal table*******************************************
  LOOP AT it_bnkh INTO wa_bnkH.
    CLEAR wa_header.
    wa_header-zbukr = wa_bnkH-zbukr.
    wa_header-batch_no = wa_bnkH-batch_no.
    wa_header-batch_sum = wa_bnkH-batch_sum.
    wa_header-item_cnt = wa_bnkH-item_cnt.
    wa_header-rule_id = wa_bnkH-rule_id.


    READ TABLE it_bnkI INTO wa_bnki WITH KEY batch_no = wa_bnkH-batch_no.   "it_bnkI INTO wa_bnki.
    IF sy-subrc = 0 AND wa_bnki-laufi_o IS NOT INITIAL.
      wa_header-laufi = wa_bnki-laufi_o.
    ELSE.
      CONTINUE. " Skip appending this header if laufi_o is empty
    ENDIF.

    READ TABLE it_t001 WITH KEY bukrs = wa_bnkH-zbukr INTO wa_t001.
    IF sy-subrc = 0.
      " Get name1 and name2 from it_adrc based on adrnr
      READ TABLE it_adrc WITH KEY addrnumber = wa_t001-adrnr INTO wa_adrc.
      IF sy-subrc = 0.
        wa_header-name1 = wa_adrc-name1.
        wa_header-name2 = wa_adrc-name2.
        CONCATENATE wa_adrc-name1 wa_adrc-name2 INTO wa_header-full_name SEPARATED BY space.
      ELSE.
        WRITE: / 'No matching ADRC record for ADRNR:', wa_t001-adrnr.
      ENDIF.
    ELSE.
      WRITE: / 'No matching T001 record for ZBUKRS:', wa_bnkH-zbukr.
    ENDIF.

    " Get data from it_reguh
    READ TABLE it_reguh INTO wa_reguh WITH KEY zbukr = wa_bnkH-zbukr.
    IF sy-subrc = 0.
      wa_header-hbkid = wa_reguh-hbkid.
      wa_header-ubnky = wa_reguh-ubnky.
      wa_header-ubknt = wa_reguh-ubknt.
    ENDIF.

    " Get data from it_bnka
    READ TABLE it_bnka INTO wa_bnka WITH KEY bankl = wa_reguh-ubnky.
    IF sy-subrc = 0.
      wa_header-banka = wa_bnka-banka.
    ELSE.
      SELECT SINGLE banka INTO (wa_header-banka) FROM bnka WHERE bankl = wa_reguh-ubnky.
    ENDIF.

    READ TABLE it_tt INTO wa_tt WITH KEY rule_id =  wa_bnkh-rule_id.
    IF sy-subrc = 0.
      wa_header-text = wa_tt-text.
    ENDIF.
    " Append the combined data to the header table
    APPEND wa_header TO it_header.
  ENDLOOP.
************************************* END HEADER TABLE *****************************************
  "total Amount
  DATA: lv_total_amount  TYPE i.

  LOOP AT it_header INTO wa_header .
    lv_total_amount  +=  wa_header-batch_sum.
  ENDLOOP.

  DATA: lt_t001w TYPE TABLE OF t001w,
        wa_t001w TYPE t001w.

*************************************** Start of ITEM DETAILS*****************************************
  CLEAR it_bseg.

  IF it_bnki[] IS NOT INITIAL.
    SELECT bukrs belnr prctr h_blart netdt lifnr kunnr gjahr augdt augbl h_bldat
      INTO TABLE it_bseg
      FROM bseg
      FOR ALL ENTRIES IN it_bnki
      WHERE augbl = it_bnki-vblnr
      and bukrs = it_bnki-ZBUKR
      and lifnr = it_bnki-LIFNR.

    SORT it_bseg BY augbl. " Optimize lookup performance
    DATA: lt_bnka TYPE HASHED TABLE OF bnka WITH UNIQUE KEY swift.
  ENDIF.

  LOOP AT it_bnki INTO wa_bnki.
    CLEAR wa_item.
    MOVE-CORRESPONDING wa_bnki TO wa_item.
    wa_item-key_id = |{ wa_bnki-lifnr }_{ wa_bnki-vblnr }|.


    " Optimize lookup using BINARY SEARCH
    READ TABLE it_bseg INTO wa_bseg WITH KEY augbl = wa_bnki-vblnr BINARY SEARCH.
    IF sy-subrc = 0.
      wa_item-belnr = wa_bseg-belnr.
      wa_item-blart = wa_bseg-h_blart.
    ENDIF.

    " Optimize bank lookup using hashed table
    READ TABLE lt_bnka INTO wa_bnka WITH KEY swift = wa_reguh-zswif.
    IF sy-subrc = 0.
      wa_item-banka = wa_bnka-banka.
    ENDIF.

    " Fetch vendor group if lifnr exists
    IF wa_item-lifnr IS NOT INITIAL.
      SELECT SINGLE konzs
        FROM lfa1
        INTO wa_item-konzs
        WHERE lifnr = wa_item-lifnr.
    ENDIF.

    APPEND wa_item TO it_item.
  ENDLOOP.

  CLEAR it_acdoca.

  IF it_item[] IS NOT INITIAL.
    SELECT rbukrs ,belnr ,prctr ,blart ,netdt ,awref ,hsl ,lifnr ,kunnr ,gjahr ,augdt ,augbl ,bldat
      INTO TABLE @it_acdoca
      FROM acdoca
      FOR ALL ENTRIES IN @it_item
      WHERE belnr = @it_item-belnr AND rbukrs = @it_item-ZBUKR and prctr <> ''.

    SORT it_acdoca BY awref.
  ENDIF.

  LOOP AT it_item INTO wa_item.
    READ TABLE it_acdoca INTO wa_acdoca WITH KEY awref = wa_item-belnr BINARY SEARCH.
    IF sy-subrc = 0 and wa_acdoca-prctr is NOT INITIAL.
      MOVE-CORRESPONDING wa_acdoca TO wa_item.
      wa_item-werks = wa_acdoca-prctr+0(4).
      wa_item-prctr = wa_acdoca-prctr.
    ENDIF.

    MODIFY it_item FROM wa_item TRANSPORTING prctr werks  belnr.
  ENDLOOP.

  IF it_item[] IS NOT INITIAL.
    SELECT bukrs belnr xblnr
      INTO TABLE it_bkpf
      FROM bkpf
      FOR ALL ENTRIES IN it_item
      WHERE belnr = it_item-belnr
        AND bukrs = it_item-zbukr.

    SORT it_bkpf BY belnr.

    CLEAR it_reguh.
    SELECT laufd laufi hbkid zbukr ubnky ubknt  vblnr lifnr name1 kunnr xvorl zswif zbnkn zbnkn_long  bkref
      INTO TABLE it_reguh
      FROM reguh
      FOR ALL ENTRIES IN it_item
      WHERE lifnr = it_item-lifnr
        AND laufd = it_item-laufd
        AND zbukr = it_item-zbukr.

    "SORT it_reguh BY lifnr laufd zbukr.
  ENDIF.

  LOOP AT it_item INTO wa_item.
    READ TABLE it_bkpf INTO wa_bkpf WITH KEY belnr = wa_item-belnr BINARY SEARCH.
    IF sy-subrc = 0.
      wa_item-xblnr = wa_bkpf-xblnr.
    ENDIF.
    READ TABLE it_reguh into wa_reguh WITH KEY lifnr = wa_item-lifnr VBLNR = wa_item-vblnr zbukr = wa_item-zbukr.
    IF sy-subrc = 0  and wa_reguh-zswif <> ''.
      wa_item-zswif = wa_reguh-zswif.
    endif.
    IF sy-subrc = 0.
      wa_item-zbnkn = wa_reguh-zbnkn.
      wa_item-lif_name1 = wa_reguh-name1.
    ENDIF.
    MODIFY it_item FROM wa_item TRANSPORTING xblnr zswif zbnkn lif_name1.
  ENDLOOP.
********************************* END of Items Details **************************************************

***************************** Start of bill details ******************************************************
  clear it_bseg.
  IF it_item[] IS NOT INITIAL.
    SELECT bukrs belnr prctr h_blart netdt  lifnr kunnr gjahr augdt augbl H_BLDAT ebeln qbshb wrbtr
      INTO TABLE it_bseg
      FROM bseg
      FOR ALL ENTRIES IN it_item
      WHERE augbl = it_item-vblnr
      and bukrs = it_item-ZBUKR
      and augdt = it_item-laufd.
  ENDif.

  LOOP AT it_bseg INTO wa_bseg.
    CLEAR wa_bill.  " Ensure wa_bill is reset before each iteration

    " Ensure data is only fetched when the condition is met
    IF wa_bseg-belnr <> wa_bseg-augbl.
      wa_bill-belnr   = wa_bseg-belnr.
      wa_bill-h_blart = wa_bseg-h_blart.
      wa_bill-ebeln   = wa_bseg-ebeln.
      wa_bill-netdt   = wa_bseg-netdt.

      " Corrected negation syntax
      wa_bill-tds = - wa_bseg-qbshb.
      wa_bill-h_bldat = wa_bseg-h_bldat.
      wa_bill-wrbtr = wa_bseg-wrbtr.
      " amt pay able.
      wa_bill-amt_py = wa_bseg-wrbtr.


      " if doc. type is AB
      IF wa_bseg-h_blart = 'AB'.
        wa_bill-tds = - wa_bseg-qbshb * -1.
        wa_bill-h_bldat = wa_bseg-h_bldat * -1.
        wa_bill-wrbtr = wa_bseg-wrbtr * -1.

        " amt pay able.
        wa_bill-amt_py = wa_bseg-wrbtr * -1.

      ENDIF.

      " Corrected condition format
      IF wa_bill-wrbtr IS NOT INITIAL.
        wa_bill-final = wa_bill-wrbtr + wa_bill-tds.
      ENDIF.

      " Append only when the condition is met
      APPEND wa_bill TO it_bill.
    ENDIF.
  ENDLOOP.
*************************************************************************
  DATA: l_hd TYPE TABLE OF ty_header_data,
        s_hd TYPE ty_header_data,
        l_it TYPE TABLE OF ty_item_data,
        s_it TYPE ty_item_data,
        l_bl TYPE TABLE OF ty_bill_dt,
        s_bl TYPE ty_bill_dt.

  DATA: f_name TYPE rs38l_fnam.
  DATA: l_sum TYPE wrbtr.



  IF  it_header IS NOT INITIAL.
    L_HD = IT_HEADER.
  ENDIF.

  IF IT_ITEM IS NOT INITIAL.
    L_IT = IT_ITEM.
  ENDIF.

  IF IT_BILL IS NOT INITIAL.
    L_BL = IT_BILL.
    LOOP AT l_bl INTO s_bl.
      IF s_bl-skfbt IS INITIAL.
        s_bl-skfbt = s_bl-wrbtr.
      ENDIF.
      s_bl-amt_py = s_bl-wrbtr.
      MODIFY l_bl FROM s_bl.
    ENDLOOP.
  ENDIF.

  data: lv_fn TYPE RS38L_FNAM.

  CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
    EXPORTING
      FORMNAME           = 'ZFI_BCM_CHEKCLIST_FORM_CP'
*     VARIANT            = ' '
*     DIRECT_CALL        = ' '
    IMPORTING
      FM_NAME            = lv_fn
    EXCEPTIONS
      NO_FORM            = 1
      NO_FUNCTION_MODULE = 2
      OTHERS             = 3.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.


CALL FUNCTION '/1BCDWB/SF00000193'
* EXPORTING
*   ARCHIVE_INDEX              =
*   ARCHIVE_INDEX_TAB          =
*   ARCHIVE_PARAMETERS         =
*   CONTROL_PARAMETERS         =
*   MAIL_APPL_OBJ              =
*   MAIL_RECIPIENT             =
*   MAIL_SENDER                =
*   OUTPUT_OPTIONS             =
*   USER_SETTINGS              = 'X'
* IMPORTING
*   DOCUMENT_OUTPUT_INFO       =
*   JOB_OUTPUT_INFO            =
*   JOB_OUTPUT_OPTIONS         =
  TABLES
    L_HD                       = it_header
    L_IT                       = it_item
    L_BL                       = it_bill
 EXCEPTIONS
   FORMATTING_ERROR           = 1
   INTERNAL_ERROR             = 2
   SEND_ERROR                 = 3
   USER_CANCELED              = 4
   OTHERS                     = 5
          .
IF SY-SUBRC <> 0.
* Implement suitable error handling here
ENDIF.


*  it_header
  cl_demo_output=>display( it_header ).
  cl_demo_output=>display( it_item ).
  cl_demo_output=>display( it_bill ).
